#!/usr/bin/python3
import os
import subprocess
from sys import platform

def app():
	def getHomeDir():
		homedir = os.environ['HOME']
		return homedir

	getUser = getHomeDir()

	def firstRun():
		#Test if config exists
		try:
			configFile = open("{}/.sshmaker-config".format(getUser), "r")
		except:
			#If it doesn't, create one and ask for path to ssh key folder
			keyFolder = input("Enter key folder name (in home dir, default ssh_keys): ")
			if keyFolder == "":
				keyFolder = "ssh_keys"
			
			configFile = open("{}/.sshmaker-config".format(getUser), "w+")
			configFile.write("{}/{}".format(getUser ,keyFolder))
		
		configFile.close()

	def readConfig():
		configFile = open("{}/.sshmaker-config".format(getUser), "r")
		configFileRead = configFile.read()

		global x
		x = configFileRead

		configFile.close()

	firstRun()
	readConfig()

	def questions():
		global host,port,name,user

		host = input("Enter hostname of system: ")
		port = input("Enter port of ssh server: ")
		name = input("Enter name of system: ")
		user = input("Enter user: ")

	def keyFileYN():
		global keyFileN 
		yn = input("Would you like to connect with a key file? [Y] [N]: ").lower()


		if yn == "y":
			keyFile = input("Enter key file name: ")
			keyFileN = "-i {}/{}".format(x, keyFile)
		elif yn == "n":
			keyFileN = ""
		else:
			print("You didn't enter y or n")
			keyFileYN()

	questions()
	keyFileYN()

	f = open("{}/{}".format(getUser, name), "w+")

	f.write("#!/bin/bash\nssh "+user+"@"+host+" -p "+port+" {}".format(keyFileN))
	f.close()


	perms = 'sudo chmod +x {}/{}'.format(getUser, name)

	print("\nSudo is needed to change perms of file to make executable.\n")
	os.system(perms)

	print("Bash script {} created.".format(name))


if platform == "linux" or platform == "linux2":
	if os.getuid() == "0" or os.getuid() == 0:
		app()
	else:
		print("Program must be run as sudo")
else:
	print("This program only works on linux but can be easily modified to work on other OSs")

		

