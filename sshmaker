#!/usr/bin/python3
import os
import subprocess

def getHomeDir():
	homedir = os.environ['HOME']
	return homedir

getUser = getHomeDir()

def firstRun():
	#Test if config exists
	try:
		configFile = open("{}/.sshmaker-config".format(getUser), "r")
	except FileNotFoundError:
		#If it doesn't, create one and ask for path to ssh key folder
		keyFolder = input("Enter path to key folder (must be in home dir): ")
		
		configFile = open("{}/.sshmaker-config".format(getUser), "w+")
		configFile.write("{}".format(keyFolder))
	
	configFile.close()

def readConfig():
	configFile = open("{}/.sshmaker-config".format(getUser), "r")
	configFileRead = configFile.read()

	global x
	x = configFileRead

	configFile.close()

firstRun()
readConfig()


host = input("Enter hostname of system: ")
port = input("Enter port of ssh server: ")
name = input("Enter name of system: ")
user = input("Enter user: ")

def keyFileYN():
	global keyFileN 
	yn = input("Would you like to connect with a key file? [Y] [N]: ").lower()


	if yn == "y":
		keyFile = input("Enter key file name: ")
		keyFileN = "-i {}/{}".format(x, keyFile)
	elif yn == "n":
		keyFileN = ""
	else:
		print("You didn't enter y or n")
		keyFileYN()


keyFileYN()

f = open("{}/{}".format(getUser, name), "w+")

f.write("#!/bin/bash\nssh "+user+"@"+host+" -p "+port+" {}".format(keyFileN))
f.close()


perms = 'sudo chmod +x {}/{}'.format(getUser, name)

print("sudo is needed to change perms of file to make executable.")
os.system(perms)

print("Bash script {} created.".format(name))
