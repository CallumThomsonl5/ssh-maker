#!/usr/bin/python3
import os
import subprocess
import json
from sys import platform

def app():
	confTemplate = {
		'KeyFolderName': ''
	}
	
	
	
	def getHomeDir():
		homedir = os.environ['HOME']
		return homedir

	getDir = getHomeDir()

	def firstRun():
		try:
			os.mkdir("/etc/sshmaker")
			confFile = open('/etc/sshmaker/config.json', 'w+')
			keyFolder = input("Enter path to key folder (Default /home/user/ssh_keys): ")
			if keyFolder == "":
				keyFolder = "{}/ssh_keys".format(getDir)
			if keyFolder[-1:] == "/":
				keyFolder = keyFolder[:-1]
			if keyFolder[1:] == "/":
				keyFolder = keyFolder[:1]
			confTemplate['KeyFolderName'] = '{}'.format(keyFolder)
			confFile.write(json.dumps(confTemplate))
			confFile.close()
		except FileExistsError:
			print("Reading config /etc/sshmaker/config.json")
		
	def readConfig():
		f = open('/etc/sshmaker/config.json', 'r')
		conf = json.load(f)
		global keyFolder
		keyFolder = conf['KeyFolderName']
		f.close()

	firstRun()
	readConfig()

	def questions():
		global host,port,name,user

		host = input("Enter hostname of system: ")
		port = input("Enter port of ssh server: ")
		name = input("Enter name of system: ")
		user = input("Enter user: ")

	def keyFileYN():
		global keyFileN 
		yn = input("Would you like to connect with a key file? [Y] [N]: ").lower()


		if yn == "y":
			keyFile = input("Enter key file name: ")
			#Remove / at start
			if keyFile[1:] == "/":
				keyFile = keyFile[:1]
			elif keyFile[1:] == "./":
				keyFile = keyFile[:2]
				
			keyFileN = "-i {}/{}".format(keyFolder, keyFile)
		elif yn == "n":
			keyFileN = ""
		else:
			print("You didn't enter y or n")
			keyFileYN()

	questions()
	keyFileYN()

	f = open("{}/{}".format(getDir, name), "w+")

	f.write("#!/bin/bash\nssh "+user+"@"+host+" -p "+port+" {}".format(keyFileN))
	f.close()


	perms = 'sudo chmod +x {}/{}'.format(getDir, name)

	print("\nSudo is needed to change perms of file to make executable.\n")
	os.system(perms)

	print("Bash script {} created.".format(name))


if platform == "linux" or platform == "linux2":
	if os.getuid() == "0" or os.getuid() == 0:
		app()
	else:
		print("Program must be run as sudo")
else:
	print("This program only works on linux but can be easily modified to work on other OSs")
